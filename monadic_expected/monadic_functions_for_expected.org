#+AUTHOR: Jeff Garland
#+TITLE: D2505R2 Monadic Functions for ~std::expected~
#+EMAIL: jeff@crystalclearsoftware.com
#+REVISION: 1
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+options: num:nil
#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS: [11pt]
#+LaTeX_HEADER: \usepackage[letterpaper,margin=.75in,top=.75in,bottom=.75in]{geometry}
#+LaTeX_HEADER: \usepackage[frame=lines, linenos=true]{minted}
#+LaTeX_HEADER: \usepackage{pdfpages}

*Authors:*
    Jeff Garland

*Audience:*
    LEWG, LWG

*Project:*
    ISO/IEC JTC1/SC22/WG21 14882: Programming Language â€” C++

*Contact:*
    jeff@crystalclearsoftware.com


* Introduction
With the final plenary vote of [[https://wg21.link/P0798][P0798 Monadic Functions for std::optional]] complete, we now have an design inconsistency with ~std::expected~. [[https://wg21.link/P0323][P0323 std::expected]] has now also been voted into the working draft for C++23. This proposal corrects the inconsistency by adding 4 functions to ~std::expected~ and is targeted at C++23.  The author believes this should be treated as a consistency/bug fix still in scope for C++23.

The intent from P0798 clearly states that ~std::expected~ should gain the same functions:
#+begin_quote
There is a proposal for std::expected which would benefit from many of these same ideas. If the idea to add monadic interfaces to standard library classes on a case-by-case basis is chosen rather than a unified non-member function interface, then compatibility between this proposal and the std::expected one should be maintained
#+end_quote
* Motivation and Scope

The following 3 functions are added to ~std::optional~, but are currently not part of ~std::expected~.  

  - ~and_then~     compose a chain of functions returning an expected
  - ~or_else~      returns if it has a value, otherwise it calls a function with the error type
  - ~transform~    apply a function to change the value (and possibly the type)

After feedback on the R0, this draft also proposes the addition of a fourth function for ~expected~ to facilitate additional cases:

  - ~transform_or~ apply a function to change the value, otherwise call a function with error type

For example, given the following:
#+BEGIN_SRC C++
  using time_expected = expected<boost::posix_time::ptime, std::string>;

  time_expected from_iso_str( std::string time )
  {
    try {
      ptime t  = boost::posix_time::from_iso_string( time );
      return t;
    }
    catch( std::exception& e )
    {
       return unexpected( e.what() + " str was: "s + time);
    }
  }

  // for use with transform
  ptime next_day( boost::posix_time::ptime t )
  {
     return t + boost::gregorian::days(1);
  }

  // for use with or_else
  void print_error( std::string error )
  {
     cout << error << endl;
  }


  //valid iso string
  const std::string ts ( "20210726T000000" );
#+END_SRC

Before the change we'd write this:

| Before |
#+BEGIN_SRC C++
  time_expected d = from_iso_str( ts );
  if (d)
  {
     ptime t = next_day( *d );
  } 
  else
  {
     print_error( d.error() );
  }
#+END_SRC

And after, this:

| After |

#+BEGIN_SRC C++
   // chain a series of functions until there's an error
   auto d = from_iso_str ( ts )
                  .or_else( print_error )
                  .transform( next_day ) ;
#+END_SRC

Jonathan Wakely has a live demo illustrating the api here https://godbolt.org/z/3a1j6d63a.
For more examples see: https://godbolt.org/z/K7rbhx9oo.

* Design Considerations
** ~expected<void, E>~
Compared with ~optional~, ~expected~ provides the capability for ~void~ as a function return type. This complicates the design compared to ~optional~.  As currently specified the ~void~ specialization of ~expected~, ~expected<void, T>~ removes the ~value_or~ function since ~void~ cannot be initialized to anything else.

While the primary implementation for this paper excludes ~transform~ for ~expected<void, E>~ and the original version removed this overload, feedback from reviewers suggested the overload is valuable.  Thus the new version allows for this overload.

** ~transform_or~ function

The R0 version of this paper did not include this function to match optional, but several reviewers noted the important utility of this case. Note that in the reference implementation of this paper, the function is called ~map_error~.

** changing of error return types

One complication of the monadic functions for ~expected~ as compared to ~optional~ is the ability to change the return error return type on subsequent function calls.  Optional, of course, can only return ~std::nullopt_t~. 

Thus we would like to support use cases like the following:

#+BEGIN_SRC

    std::expected<SomeUserType, InternalError> initialize();

    std::expected<SomeUserType, UserError>
    makeUserError(InternalError err) 
    { 
       return std::unexpected( UserError(err) ); 
    };

    std::expected<SomeUserType, UserError> result = initialize().or_else( makeUserError );

#+END_SRC

Note that the changing of the error type applies to the ~or_else~ and ~transform_or~ overloads only.

* Other Languages

Rust provides a result type with similar functions monadic functions.

https://doc.rust-lang.org/std/result/enum.Result.html

* Implementations

Jonathan Wakely has implemented the full proposal here https://github.com/jwakely/gcc/blob/expected/libstdc%2B%2B-v3/include/std/expected.

The core of the proposal was originally implemented by Sy Brand https://github.com/TartanLlama/expected with [[https://tl.tartanllama.xyz/en/latest/api/expected.html#tl-expected][documentation here]]. 


* Wording
** Feature Test Macro  

Update the ~__cpp_lib_expected~ feature test macro from P0323.  Although this could be considered optional since expected is not yet a c++ feature in any implementations.

** Class template expected [expected.expected]

After ~value_or~ functions add the new functions:

#+BEGIN_SRC C++
  template<class U> constexpr T value_or(U&&) &&;

  // [expected.monadic], monadic operations
  template <class F> constexpr auto and_then(F&& f) &;
  template <class F> constexpr auto and_then(F&& f) &&;
  template <class F> constexpr auto and_then(F&& f) const&;
  template <class F> constexpr auto and_then(F&& f) const&&;
  template <class F> constexpr auto or_else(F&& f) &;
  template <class F> constexpr auto or_else(F&& f) &&;
  template <class F> constexpr auto or_else(F&& f) const&;
  template <class F> constexpr auto or_else(F&& f) const&&;
  template <class F> constexpr auto transform(F&& f) &;
  template <class F> constexpr auto transform(F&& f) &&;
  template <class F> constexpr auto transform(F&& f) const&;
  template <class F> constexpr auto transform(F&& f) const&&;
  template <class F> constexpr auto transform_or(F&& f) &;
  template <class F> constexpr auto transform_or(F&& f) &&;
  template <class F> constexpr auto transform_or(F&& f) const&;
  template <class F> constexpr auto transform_or(F&& f) const&&;
  // [expected.object.swap], swap
#+END_SRC

** Add a new sub-clause Monadic operations for [expected.monadic] between [expected.observe] and [expected.equality]   

  1 ~template <class F> constexpr auto and_then(F&& f) &;~

  2 ~template <class F> constexpr auto and_then(F&& f) const&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(value())>>~.

    /Constraints:/ 
   - ~is_same_v<U::error_type, E>~ is ~true~, 
   - ~is_copy_constructible_v<E>~ is ~true~, and
   - ~is_copy_constructible_v<U>~ is ~true~. 

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
      if (*this) { 
         return invoke(std::forward<F>(f), value());
      }
      else { 
         return *this;
      }
#+END_SRC

  1 ~template <class F> constexpr auto and_then(F&& f) &&;~

  2 ~template <class F> constexpr auto and_then(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(std::move(value()))>>~.

    /Constraints:/
       - ~is_same_v<U::error_type, E>~ is ~true~, 
       - ~is_move_constructible_v<E>~ is ~true~, and
       - ~is_move_constructible_v<U>~ is ~true~. 

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
          return invoke(std::forward<F>(f), std::move(value()));
       }
       else { 
          return std::move(*this);
       }
#+END_SRC
   1 ~template <class F> constexpr auto or_else(F&& f) &;~

   2 ~template <class F> constexpr auto or_else(F&& f) const&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(std::move(error()))>>~.

    /Constraints:/
       - ~is_same_v<U::value_type, T>~ is ~true~, 
       - ~is_copy_constructible_v<T>~ is ~true~, and
       - ~is_copy_constructible_v<U>~ is ~true~. 

    /Mandates:/ U is a specialization of ~expected~.

    Effects: Equivalent to:
#+BEGIN_SRC C++
        if (*this) {
            return U(value());
        } else {
            return invoke(std::forward<F>(), error());
        }
#+END_SRC

    1 ~template <class F> constexpr auto or_else(F&& f) &&;~

    2 ~template <class F> constexpr auto or_else(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(std::move(error()))>>~. 

    /Constraints:/
       - ~is_same_v<U::value_type, T>~ is ~true~, 
       - ~is_move_constructible_v<T>~ is ~true~, and
       - ~is_move_constructible_v<U>~ is ~true~. 

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
          return std::move(*this);
       }
       else { 
          return invoke(std::forward<F>(f)(std::move(error())));
       }
#+END_SRC
   1 ~template <class F> constexpr auto transform(F&& f) &;~

   2 ~template <class F> constexpr auto transform(F&& f) const&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(error())>>~. 

    /Constraints:/
       - ~is_same_v<U::error_type, E>~ is ~true~, 
       - ~is_copy_constructible_v<E>~ is ~true~, and
       - ~is_copy_constructible_v<U>~ is ~true~. 

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) {
          return expected<U,E>(in_place, invoke(std::forward<F>(f), value()));
       }
       else { 
          return *this;
       }
#+END_SRC

    1 ~template <class F> constexpr auto transform(F&& f) &&;~

    2 ~template <class F> constexpr auto transform(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(std::move(error()))>>~. 

    /Constraints:/
       - ~is_same_v<U::error_type, E>~ is ~true~, 
       - ~is_move_constructible_v<E>~ is ~true~, and
       - ~is_move_constructible_v<U>~ is ~true~. 

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
          return expected<U,E>(in_place, invoke(std::forward<F>(f), std::move(value())));
       }
       else { 
          return std::move(*this);
       }
#+END_SRC
    1 ~template <class F> constexpr auto transform_or(F&& f) &;~

    2 ~template <class F> constexpr auto transform_or(F&& f) const&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(error())>>~. 

    /Constraints:/
       - ~is_copy_constructible_v<T>~ is ~true~, and
       - ~is_copy_constructible_v<U>~ is ~true~. 

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
           return expected<T, U>(value());
       } 
       else { 
          return invoke(std::forward<F>(f)(error()));
       }
#+END_SRC
    1 ~template <class F> constexpr auto transform_or(F&& f) &&;~

    2 ~template <class F> constexpr auto transform_or(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(std::move(error()))>>~.

    /Constraints:/
       - ~is_move_constructible_v<T>~ is ~true~, and
       - ~is_move_constructible_v<U>~ is ~true~. 

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
          return expected<T, U>(std::move(value()))
       }
       else { 
          return invoke(std::forward<F>(f)(std::move(error())));
       }
#+END_SRC

** Partial specialization of expected for void types [expected.void]
After ï¿½.ï¿½.8.6, observers -- add

#+BEGIN_SRC C++
  // ï¿½.ï¿½.8.7, monadic
  template <class F> constexpr auto and_then(F&& f) &;
  template <class F> constexpr auto and_then(F&& f) &&;
  template <class F> constexpr auto and_then(F&& f) const&;
  template <class F> constexpr auto and_then(F&& f) const&&;
  template <class F> constexpr auto or_else(F&& f) &;
  template <class F> constexpr auto or_else(F&& f) &&;
  template <class F> constexpr auto or_else(F&& f) const&;
  template <class F> constexpr auto or_else(F&& f) const&&;
  template <class F> constexpr auto transform(F&& f) &;
  template <class F> constexpr auto transform(F&& f) &&;
  template <class F> constexpr auto transform(F&& f) const&;
  template <class F> constexpr auto transform(F&& f) const&&;
  template <class F> constexpr auto transform_or(F&& f) &;
  template <class F> constexpr auto transform_or(F&& f) &&;
  template <class F> constexpr auto transform_or(F&& f) const&;
  template <class F> constexpr auto transform_or(F&& f) const&&;
#+END_SRC
** Partial specialization of expected for void [expected.void.observe]
After section ï¿½.ï¿½.8.5 Observers [expected.void.observe]

Add section ï¿½.ï¿½.8.6 Monadic [expected.void.monadic]

  1 ~template <class F> constexpr auto and_then(F&& f) &;~

  2 ~template <class F> constexpr auto and_then(F&& f) const&;~

  3 ~template <class F> constexpr auto and_then(F&& f) &&;~

  4 ~template <class F> constexpr auto and_then(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F,void>>~. 

    /Constraints:/ ~is_same_v<U::error_type, E>~ is true. E models ~copy_constructible~ for the first two overloads and ~move_constructible~ for the second two overloads. [ /Note:/ U will implicitly model either copy or move constructible since U is ~expected<void, E>~ -- /end note/ ].

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
      if (*this) { 
         return std::move(std::forward<F>(f)());
      }
      else { 
         return std::move(*this);
      }
#+END_SRC

    1 ~template <class F> constexpr expected or_else(F&& f) &;~

    2 ~template <class F> constexpr expected or_else(F&& f) const&;~

    3 ~template <class F> constexpr expected or_else(F&& f) &&;~

    4 ~template <class F> constexpr expected or_else(F&& f) const &&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(error())>>~. 

    /Constraints:/  E models ~copy_constructible~ for the first two overloads and ~move_constructible~ for the second two overloads.

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
           return std::move(*this);
       } 
       else { 
          return std::forward<F>(f)();
       }
#+END_SRC


   1 ~template <class F> constexpr auto transform(F&& f) &;~

   2 ~template <class F> constexpr auto transform(F&& f) const&;~

   3 ~template <class F> constexpr auto transform(F&& f) &&;~

   4 ~template <class F> constexpr auto transform(F&& f) const&&;~

    Let U be ~remove_cvref_t<invoke_result_t<F,void>>~. 

    /Constraints:/ ~is_same_v<U::error_type, E>~ is true. E models ~copy_constructible~ for the first two overloads and ~move_constructible~ for the second two overloads.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) {
          return expected<U,E>(in_place, std::forward<F>(f)());
       }
       else { 
          return std::move(*this);
       }
#+END_SRC

    1 ~template <class F> constexpr auto transform_or(F&& f) &;~

    2 ~template <class F> constexpr auto transform_or(F&& f) const&;~

    3 ~template <class F> constexpr auto transform_or(F&& f) &&;~

    4 ~template <class F> constexpr auto transform_or(F&& f) &&;~

    Let U be ~remove_cvref_t<invoke_result_t<F, decltype(error())>>~. 

    /Constraints:/ E models ~copy_constructible~ for the first two overloads and ~move_constructible~ for the second two overloads.

    /Mandates:/ U is a specialization of ~expected~.

    /Effects:/ Equivalent to:
#+BEGIN_SRC C++
       if (*this) { 
           return std::move(*this);
       } 
       else { 
          return std::move(std::forward<F>(f)(error()));
       }
#+END_SRC

* Acknowledgements
 - Thanks to Jonathan Wakely for implemenation and wording feedback.
 - Thanks to Sy Brand for the original work on optional and expected.
 - Thanks to Broneck Kozicki for early feedback.
 - Thanks to Arthur O'Dwyer for design and wording feedback.
 - Thanks to Barry Revzin for design and wording feedback.
* Revision History

| Version |       Date | Changes                                                                         |
|---------+------------+---------------------------------------------------------------------------------|
|       0 | 2021-12-12 | Initial Draft                                                                   |
|---------+------------+---------------------------------------------------------------------------------|
|       1 | 2022-02-10 | added ~transform_or~                                                            |
|         |            | allow ~transform~ on ~expected<void, E>~                                        |
|         |            | updated status of P0323 to plenary approved                                     |
|         |            | improved examples                                                               |
|         |            | added missing overloads for ~or_else~                                           |
|         |            | ~or_else~ signature and wording fixes                                           |
|         |            | added design discussion of changing return types                                |
|         |            | variety of wording fixes                                                        |
|---------+------------+---------------------------------------------------------------------------------|
|       2 | 2022-03-28 | updates to reference Wakely implmentation and examples                          |
|         |            | remove uneeded invoke calls from void overloads                                 |
|         |            | expected.object.swap instead of modifiers in synopsis                           |
|         |            | change constraint wording to use ~is_copy_constructible_v~ form for consistency |
|         |            | change Let U for move overloads to ~decltype(std::move(...))~                   |
|         |            | fix ~transform_or~ and ~or_else~ constraints to be T instead of E               |
|         |            | remove the ~is_same_v~ constraint on ~transform_or~                             |
|         |            | change ~tranform_or~ true case to return expected<T,U>                          |
|         |            |                                                                                 |
|---------+------------+---------------------------------------------------------------------------------|

* References
  1. [P0798] Sy Brand "Monadic Functions for std::optional" https://wg21.link/P0798
  2. C++ draft [optional.nomadic] http://eel.is/c++draft/optional.monadic
  3. [P0323] Vicente Botet, JF Bastien, Jonathan Wakely  std::expected https://wg21.link/P0323
  4. Sy Brand expected  https://github.com/TartanLlama/expected
  5. Sy Brand expected docs https://tl.tartanllama.xyz/en/latest/api/expected.html#tl-expected
  6. Jonathan Wakely full implemenation https://github.com/jwakely/gcc/blob/expected/libstdc%2B%2B-v3/include/std/expected
  7. Jonathan Wakely live demo https://godbolt.org/z/3a1j6d63a
  8. Rust Result https://doc.rust-lang.org/std/result/enum.Result.html
  9. More complete examples https://godbolt.org/z/va5fzx11f
